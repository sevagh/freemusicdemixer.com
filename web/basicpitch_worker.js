let wasmModule,loadedModule;function loadWASMModule(e){importScripts(e+"?v="+(new Date).getTime()),(wasmModule=libbasicpitch()).then(e=>{postMessage({msg:"WASM_READY"}),loadedModule=e})}onmessage=function(e){var d,l,o,a,t,u,M,r,s,n,m;"LOAD_WASM"===e.data.msg?loadWASMModule(e.data.scriptName):"PROCESS_AUDIO"===e.data.msg&&(l=new Float32Array(e.data.inputData),u=e.data.length,n=e.data.batchMode,console.log("Running MIDI inference..."),d=loadedModule._malloc(l.length*l.BYTES_PER_ELEMENT),new Float32Array(loadedModule.HEAPF32.buffer,d,l.length).set(l),l=loadedModule._malloc(4),o=loadedModule._malloc(4),a=loadedModule._malloc(4),t=loadedModule._malloc(4),loadedModule._convertToMidi(d,u,l,o,a,t,e.data.stemName,n),u=loadedModule.getValue(l,"i32"),n=loadedModule.getValue(o,"i32"),M=loadedModule.getValue(a,"i32"),r=loadedModule.getValue(t,"i32"),0===u&&0===M?(console.error("Failed to generate MIDI and musicxml data."),console.log("midiData:",u),console.log("midiSize:",n),console.log("mxmlData:",M),console.log("mxmlSize:",r),postMessage({msg:"PROCESSING_FAILED"})):(m=new Uint8Array(loadedModule.HEAPU8.buffer,u,n),s=new Uint8Array(loadedModule.HEAPU8.buffer,M,r),(n=new Uint8Array(n)).set(m),(m=new Uint8Array(r)).set(s),postMessage({msg:"PROCESSING_DONE",midiBytes:n.buffer,mxmlBytes:m.buffer,stemName:e.data.stemName},[n.buffer,m.buffer]),loadedModule._free(u),loadedModule._free(M),loadedModule._free(d),loadedModule._free(l),loadedModule._free(o),loadedModule._free(a),loadedModule._free(t)))};